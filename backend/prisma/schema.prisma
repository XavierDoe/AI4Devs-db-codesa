// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int      @id @default(autoincrement())
  companyId  Int
  name       String
  email      String   @unique
  role       String
  isActive   Boolean  @default(true)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviews Interview[]
}

model InterviewFlow {
  id            Int              @id @default(autoincrement())
  description   String
  positions     Position[]
  interviewSteps InterviewStep[]
}

model Position {
  id                Int           @id @default(autoincrement())
  companyId         Int
  interviewFlowId   Int?
  title             String
  description       String?
  status           String
  isVisible         Boolean      @default(true)
  location         String?
  jobDescription   String?
  requirements     String?
  responsibilities String?
  salaryMin        Float?
  salaryMax        Float?
  employmentType   String?
  benefits         String?
  companyDescription String?
  applicationDeadline DateTime?
  contactInfo      String?
  company          Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviewFlow    InterviewFlow? @relation(fields: [interviewFlowId], references: [id], onDelete: SetNull)
  applications     Application[]
}

model InterviewType {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  interviewSteps InterviewStep[]
}

model InterviewStep {
  id             Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name           String
  orderIndex     Int
  interviewFlow  InterviewFlow @relation(fields: [interviewFlowId], references: [id], onDelete: Cascade)
  interviewType  InterviewType @relation(fields: [interviewTypeId], references: [id], onDelete: Cascade)
  interviews     Interview[]
}

model Candidate {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  address   String?
  applications Application[]
}

model Application {
  id          Int         @id @default(autoincrement())
  positionId  Int
  candidateId Int
  applicationDate DateTime @default(now())
  status      String
  notes       String?
  position    Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  interviews  Interview[]
}

model Interview {
  id             Int          @id @default(autoincrement())
  applicationId  Int
  interviewStepId Int
  employeeId     Int?
  interviewDate  DateTime
  result         String?
  score         Int?
  notes         String?
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewStep InterviewStep @relation(fields: [interviewStepId], references: [id], onDelete: Cascade)
  employee      Employee?      @relation(fields: [employeeId], references: [id], onDelete: SetNull)
}

model Education {
  id          Int      @id @default(autoincrement())
  degree      String
  field       String
  school      String
  startDate   DateTime
  endDate     DateTime?
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
}

model Resume {
  id          Int      @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
  experiences WorkExperience[]
  education   Education[]
}

model WorkExperience {
  id          Int      @id @default(autoincrement())
  company     String
  role        String
  startDate   DateTime
  endDate     DateTime?
  description String?
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
}